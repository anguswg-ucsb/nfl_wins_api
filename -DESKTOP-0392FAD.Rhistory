c("away_team",
paste0("opp_", names(.)[names(.) != "team"])
)
)
# Join Home team and away team stats leading up to upcoming game, used as input into models
matchups <-
home %>%
dplyr::left_join(
away,
by = c("away_team")
) %>%
dplyr::relocate(season, week, game_id, team = home_team, opponent = away_team)
return(matchups)
}
}
scrape_games()
scrape_games(2023, 3)
scrape_games(2023, -3)
#' @title Scrape data needed to make a prediction for a given week
#' @description Retrieves the necessary model input data from profootballreference.com and returns a dataframe that can be inputted into models
#' @param year numeric for season of interest
#' @param pred_week numeric for the week that we want to get the team matchups for
#' @return dataframe with necessary model inputs
scrape_games <- function(
year      = NULL,
pred_week = NULL
) {
# if no input given for prediction week, set to predict for week 1
if(is.null(pred_week)) {
pred_week = 1
}
# current date when function is run in VM
current_date <- Sys.Date()
# current NFL season year
current_year <- get_year()
# if no input year is given, set prediction year to current season
if(is.null(year)) {
# default returns year of current season
year <- current_year
}
# If input year is greater than the current season, set year to current_year
if(year >= current_year) {
# current week of NFL season
# current_week <- get_week()
# default returns year of current season
year  <- current_year
# check if pred_week is too far in the future to make prediction
if(pred_week > current_week) {
# current week of NFL season
current_week <- get_week()
# set pred_week to current week of NFL season
pred_week <- current_week
}
}
# if input year is before 2016, set year to 2016 (web scrape lookback limitation)
if(year < 2016) {
year <-  2016
logger::log_info("Year entered was less than 2000 season, defaulting to {year} season")
}
# Check and make sure pred_week is a valid week of season
if(pred_week < 1) {
# setting week to 2 if pred_week is less than 2
logger::log_info("\n\nWeek {pred_week} invalid\nWeek must be within valid week range: 1 - upcoming week\nSetting pred_week = 1")
pred_week = 1
}
# Take account of added game after 2020 season
if(year >= 2021 & pred_week > 18) {
# setting week to max week after 2020 season (18)
logger::log_info("\n\nWeek {pred_week} invalid\nWeek must be within valid week range: 1 - 18\nSetting pred_week = 18")
pred_week = 18
}
# Take account of fewer games before 2021 seasons
if(year < 2021 & pred_week > 17) {
# setting week to max week before 2021 season (17)
logger::log_info("\n\nWeek {pred_week} invalid\nWeek must be within valid week range: 1 - 17\nSetting pred_week = 17")
pred_week = 17
}
# if prediction for week 1 is desired, use last seasons data
if(pred_week == 1) {
# Prior season to get metrics leading into week 1 of year
past_year <- year - 1
# Construct URL
url  <- paste0("https://www.pro-football-reference.com/years/", past_year ,"/games.htm")
# Read HTML page using URL
page <- rvest::read_html(url)
# Rename playoff columns as weeks, accounting for added game after 2020 season
if (past_year >= 2021) {
# If season is after 2020
page_table <- process_page(
page      = page
) %>%
dplyr::filter(week <= 18)
# Rename playoff columns as weeks, accounting for fewer games before 2021
} else {
# if season is before 2021
page_table <- process_page(
page      = page
) %>%
dplyr::filter(week <= 17)
}
# parse data tables from Pro Football Reference
outcomes <-
page_table %>%
dplyr::left_join(
dplyr::select(nfl_teams(), team_name, win_team_abb = team_abb),
by = c("winner_tie" = "team_name")
) %>%
dplyr::left_join(
dplyr::select(nfl_teams(), team_name, lose_team_abb = team_abb),
by = c("loser_tie" = "team_name")
) %>%
dplyr::select(week, date,
win_team  = win_team_abb,
x,
lose_team = lose_team_abb,
pts_win   = pts,
pts_lose  = pts_2,
tow, tol)  %>%
dplyr::mutate(
home_team = dplyr::case_when(
x == ""  ~ win_team,
x == "@" ~ lose_team,
week == 22 ~ win_team
),
away_team = dplyr::case_when(
x == ""  ~ lose_team,
x == "@" ~ win_team,
week == 22 ~ lose_team
),
pts_win  = as.numeric(pts_win),
pts_lose = as.numeric(pts_lose),
game_id  = dplyr::case_when(
week < 10 ~ paste0(past_year, "_0", week, "_", away_team, "_",  home_team),
week >= 10 ~ paste0(past_year, "_", week, "_", away_team, "_",  home_team)
)
) %>%
dplyr::select(-x) %>%
dplyr::group_by(game_id) %>%
dplyr::mutate(
home_pts = dplyr::case_when(
home_team == win_team ~ max(pts_win, pts_lose),
home_team != win_team ~ min(pts_win, pts_lose)
),
away_pts = dplyr::case_when(
home_team == win_team ~ min(pts_win, pts_lose),
home_team != win_team ~ max(pts_win, pts_lose)
),
home_turnovers = dplyr::case_when(
home_team == win_team ~ tow,
home_team != win_team ~ tol
),
away_turnovers = dplyr::case_when(
home_team == win_team ~ tol,
home_team != win_team ~ tow
),
season = year
) %>%
dplyr::ungroup() %>%
dplyr::select(season, week, game_id, gameday = date, home_team, away_team,
home_score = home_pts, away_score = away_pts,
home_turnovers, away_turnovers)
# calculate win loss percentages
record <- get_win_pct(outcomes, verbose = FALSE)
# Create Score differential, home or away team ID, # of rest days
outcomes <-
outcomes %>%
tidyr::pivot_longer(
cols      = c(home_team, away_team),
names_to  = "home",
values_to = "team"
) %>%
dplyr::mutate(
home = dplyr::case_when(
home == "home_team" ~ 1,
home == "away_team" ~ 0
),
score_diff = dplyr::case_when(
home == 1 ~ home_score - away_score,
home == 0 ~ away_score - home_score
),
home_away  = case_when(
home == 1 ~ "home_team",
home == 0 ~ "away_team"
)
) %>%
dplyr::mutate(
split_game_id = substr(game_id, 9, 20)
) %>%
dplyr::mutate(
home_team     =  stringr::str_split_fixed(split_game_id, "_", 2)[,2],
away_team     =  stringr::str_split_fixed(split_game_id, "_", 2)[,1],
opponent      =  dplyr::case_when(
home_team == team ~ away_team,
away_team == team ~ home_team
)
) %>%
dplyr::select(-split_game_id, -home_team, -away_team) %>%
dplyr::group_by(team) %>%
dplyr::arrange(gameday, .by_group = T) %>%
dplyr::mutate(
lag_date    = lag(gameday),
rest_days   = as.numeric(round(difftime(gameday, lag_date), 0))
) %>%
dplyr::ungroup() %>%
dplyr::select(-lag_date, -gameday, -home) %>%
replace(is.na(.), 7) %>%
dplyr::relocate(season, week, game_id, team, opponent, home_away, rest_days, score_diff, home_score, away_score) %>%
dplyr::left_join(
dplyr::select(record, week, game_id, team, win, win_pct, home_win_pct, away_win_pct),
by = c("week", "game_id", "team")
)
# Calculate ELO ratings
elo <-
outcomes %>%
dplyr::filter(home_away == "home_team") %>%
dplyr::select(season, week, game_id, team, opponent, win, home_score, away_score) %>%
get_nfl_elo()
# Join ELO ratings back w/ outcomes
outcomes <-
outcomes %>%
dplyr::left_join(
dplyr::select(elo, week, game_id, team, elo),
by = c("week", "game_id", "team")
) %>%
dplyr::group_by(team) %>%
dplyr::arrange(week, .by_group = TRUE) %>%
dplyr::mutate(
turnovers = dplyr::case_when(
home_away == "home_team" ~ as.numeric(home_turnovers),
home_away == "away_team" ~ as.numeric(away_turnovers)
),
turnovers    = mean(turnovers, na.rm = T),
score_diff   = mean(score_diff, na.rm = T)
) %>%
dplyr::slice(which.max(week)) %>%
dplyr::select(season, week, game_id, team, opponent, home_away, win, win_pct,
home_win_pct, away_win_pct, rest_days, score_diff, turnovers, elo)  %>%
dplyr::mutate(across(c(win_pct:away_win_pct), round, 4)) %>%
dplyr::ungroup()
# Get schedule of upcoming games
next_game <- get_matchups(
year        = year,
week        = pred_week,
post_season = FALSE
)
# Upcoming home team stats
home <-
next_game %>%
dplyr::left_join(
dplyr::select(outcomes, -season, -week, -game_id, -opponent, -home_away, -win),
by = c("home_team" = "team")
)
# Upcoming away team stats
away <-
outcomes %>%
dplyr::filter(team %in% home$away_team) %>%
dplyr::select(-season, -week, -game_id, -opponent, -home_away, -win) %>%
stats::setNames(
c("away_team",
paste0("opp_", names(.)[names(.) != "team"])
)
)
# Join Home team and away team stats leading up to upcoming game, used as input into models
matchups <-
home %>%
dplyr::left_join(
away,
by = c("away_team")
) %>%
dplyr::relocate(season, week, game_id, team = home_team, opponent = away_team)
return(matchups)
# If prediction week is after week 1, use current seasons data
} else {
# Construct URL
url  <- paste0("https://www.pro-football-reference.com/years/", year ,"/games.htm")
# Read HTML page using URL
page <- rvest::read_html(url)
# process page and extract weeks leading up to prediction week
page_table <- process_page(
page = page
) %>%
dplyr::filter(week < pred_week)
# parse data tables from Pro Football Reference
outcomes <-
page_table %>%
dplyr::left_join(
dplyr::select(nfl_teams(), team_name, win_team_abb = team_abb),
by = c("winner_tie" = "team_name")
) %>%
dplyr::left_join(
dplyr::select(nfl_teams(), team_name, lose_team_abb = team_abb),
by = c("loser_tie" = "team_name")
) %>%
dplyr::select(week, date,
win_team  = win_team_abb,
x,
lose_team = lose_team_abb,
pts_win   = pts,
pts_lose  = pts_2,
tow, tol)  %>%
dplyr::mutate(
home_team = dplyr::case_when(
x == ""  ~ win_team,
x == "@" ~ lose_team,
week == 22 ~ win_team
),
away_team = dplyr::case_when(
x == ""  ~ lose_team,
x == "@" ~ win_team,
week == 22 ~ lose_team
),
pts_win  = as.numeric(pts_win),
pts_lose = as.numeric(pts_lose),
game_id  = dplyr::case_when(
week < 10 ~ paste0(year, "_0", week, "_", away_team, "_",  home_team),
week >= 10 ~ paste0(year, "_", week, "_", away_team, "_",  home_team)
)
) %>%
dplyr::select(-x) %>%
dplyr::group_by(game_id) %>%
dplyr::mutate(
home_pts = dplyr::case_when(
home_team == win_team ~ max(pts_win, pts_lose),
home_team != win_team ~ min(pts_win, pts_lose)
),
away_pts = dplyr::case_when(
home_team == win_team ~ min(pts_win, pts_lose),
home_team != win_team ~ max(pts_win, pts_lose)
),
home_turnovers = dplyr::case_when(
home_team == win_team ~ tow,
home_team != win_team ~ tol
),
away_turnovers = dplyr::case_when(
home_team == win_team ~ tol,
home_team != win_team ~ tow
),
season = year
) %>%
dplyr::ungroup() %>%
dplyr::select(season, week, game_id, gameday = date, home_team, away_team,
home_score = home_pts, away_score = away_pts,
home_turnovers, away_turnovers)
# calculate win loss percentages
record <- get_win_pct(outcomes, verbose = FALSE)
# Create Score differential, home or away team ID, # of rest days
outcomes <-
outcomes %>%
tidyr::pivot_longer(
cols      = c(home_team, away_team),
names_to  = "home",
values_to = "team"
) %>%
dplyr::mutate(
home = dplyr::case_when(
home == "home_team" ~ 1,
home == "away_team" ~ 0
),
score_diff = dplyr::case_when(
home == 1 ~ home_score - away_score,
home == 0 ~ away_score - home_score
),
home_away  = case_when(
home == 1 ~ "home_team",
home == 0 ~ "away_team"
)
) %>%
dplyr::mutate(
split_game_id = substr(game_id, 9, 20)
) %>%
dplyr::mutate(
home_team     =  stringr::str_split_fixed(split_game_id, "_", 2)[,2],
away_team     =  stringr::str_split_fixed(split_game_id, "_", 2)[,1],
opponent      =  dplyr::case_when(
home_team == team ~ away_team,
away_team == team ~ home_team
)
) %>%
dplyr::select(-split_game_id, -home_team, -away_team) %>%
dplyr::group_by(team) %>%
dplyr::arrange(gameday, .by_group = T) %>%
dplyr::mutate(
lag_date    = lag(gameday),
rest_days   = as.numeric(round(difftime(gameday, lag_date), 0))
) %>%
dplyr::ungroup() %>%
dplyr::select(-lag_date, -gameday, -home) %>%
replace(is.na(.), 7) %>%
dplyr::relocate(season, week, game_id, team, opponent, home_away,
rest_days, score_diff, home_score, away_score) %>%
dplyr::left_join(
dplyr::select(record, week, game_id, team, win, win_pct, home_win_pct, away_win_pct),
by = c("week", "game_id", "team")
)
# Calculate ELO ratings
elo <-
outcomes %>%
dplyr::filter(home_away == "home_team") %>%
dplyr::select(season, week, game_id, team, opponent, win, home_score, away_score) %>%
get_nfl_elo()
# Join ELO ratings back w/ outcomes
outcomes <-
outcomes %>%
dplyr::left_join(
dplyr::select(elo, week, game_id, team, elo),
by = c("week", "game_id", "team")
) %>%
dplyr::group_by(team) %>%
dplyr::arrange(week, .by_group = TRUE) %>%
dplyr::mutate(
turnovers = dplyr::case_when(
home_away == "home_team" ~ as.numeric(home_turnovers),
home_away == "away_team" ~ as.numeric(away_turnovers)
),
turnovers    = mean(turnovers, na.rm = T),
score_diff   = mean(score_diff, na.rm = T)
) %>%
dplyr::slice(which.max(week)) %>%
dplyr::select(season, week, game_id, team, opponent, home_away, win, win_pct,
home_win_pct, away_win_pct, rest_days, score_diff, turnovers, elo)  %>%
dplyr::mutate(across(c(win_pct:away_win_pct), round, 4)) %>%
dplyr::ungroup()
# Get schedule of upcoming games
next_game <- get_matchups(
year        = year,
week        = pred_week,
post_season = FALSE
)
# Upcoming home team stats
home <-
next_game %>%
dplyr::left_join(
dplyr::select(outcomes, -season, -week, -game_id, -opponent, -home_away, -win),
by = c("home_team" = "team")
)
# Upcoming away team stats
away <-
outcomes %>%
dplyr::filter(team %in% home$away_team) %>%
dplyr::select(-season, -week, -game_id, -opponent, -home_away, -win) %>%
stats::setNames(
c("away_team",
paste0("opp_", names(.)[names(.) != "team"])
)
)
# Join Home team and away team stats leading up to upcoming game, used as input into models
matchups <-
home %>%
dplyr::left_join(
away,
by = c("away_team")
) %>%
dplyr::relocate(season, week, game_id, team = home_team, opponent = away_team)
return(matchups)
}
}
scrape_games(2004, -3)
scrape_games(2004, 15)
scrape_games(2022, 1)
plumber::plumb(file='R/plumber.R')$run()
#* Retrieve data for desired week and generate predictions
#* @apiTitle NFL Win Predictor
#* @param year:number year of the NFL season
#* @param pred_week:number week of the NFL season to predict
#* @post /predict-new-data
plumber::plumb(file='R/plumber.R')$run()
plumber::plumb(file='R/plumber.R')$run()
plumber::plumb(file='R/plumber.R')$run()
plumber::plumb(file='R/plumber.R')$run()
plumber::plumb(file='R/plumber.R')$run()
plumber::plumb(file='R/plumber.R')$run()
plumber::plumb(file='R/plumber.R')$run()
plumber::plumb(file='R/plumber.R')$run()
plumber::plumb(file='R/plumber.R')$run()
plumber::plumb(file='R/plumber.R')$run()
plumber::plumb(file='R/plumber.R')$run()
plumber::plumb(file='R/plumber.R')$run()
plumber::plumb(file='R/plumber.R')$run()
plumber::plumb(file='R/plumber.R')$run()
plumber::plumb(file='R/plumber.R')$run()
plumber::plumb(file='R/plumber.R')$run()
plumber::plumb(file='R/plumber.R')$run()
sched2020 <- espnscrapeR::get_nfl_schedule(2020)
sched2021 <- espnscrapeR::get_nfl_schedule(2021)
unique(sched2020$game_uid)
unique(sched2021$game_uid)
unique(sched2020$game_uid) %in% unique(sched2021$game_uid)
(sched2021$game_uid) %in% unique(sched2020$game_uid)
unique(sched2021$game_uid) %in% unique(sched2020$game_uid)
unique(sched2021$game_id) %in% unique(sched2020$game_id)
View(sched2020)
View(sched2021)
sched <- dplyr::bind_rows(sched2020, sched2021)
tmp <-
sched %>%
dplyr::filter(season = 2020, type = 2)
library(dplyr)
tmp <-
sched %>%
dplyr::filter(season = 2020, type = 2)
tmp <-
sched %>%
dplyr::filter(season == 2020, type == 2)
View(tmp)
tmp
glimpse(tmp)
tmp <-
sched %>%
dplyr::filter(season == 2020, type == 2) %>%
dplyr::select(matchup, matchup_short, season, type, game_id, game_date,
home_team_abb, away_team_abb, home_win, away_win, home_score, home_record, away_record)
View(tmp)
